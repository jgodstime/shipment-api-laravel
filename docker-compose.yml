services:
    ngnix:
        container_name: shipment_nginx
        build:
            context: ./docker/development/nginx
            args:
                HOST_UID: ${HOST_UID}
        ports:
            - "${SSL_PORT}:443"
            - "${HTTP_PORT}:80"
        volumes:
            - ./:/var/www/html
            - ./docker/development/nginx/site.conf:/etc/nginx/conf.d/default.conf
        depends_on:
            - php
        networks:
            shipment:
                aliases:
                    - shipment-backend.local
        extra_hosts:
            - "shipment-backend.local:host-gateway"
            - "host.docker.internal:host-gateway" # connect to service outside container

    php:
        container_name: shipment_php
        build:
            context: ./docker/development/php
            args:
                HOST_UID: ${HOST_UID}
        ports:
            -   "$LARAVEL_WEBSOCKETS_PORT:6001"
        env_file:
            - .env
        volumes:
            - ./:/var/www/html
        depends_on:
            - db
            - redis
        extra_hosts:
            - "host.docker.internal:host-gateway"
        networks:
            - shipment

    db:
        container_name: shipment_db
        build:
            context: ./docker/development/mysql
            args:
                HOST_UID: ${HOST_UID}
        restart: always
        volumes:
            - ./docker/development/runtime/mysql:/var/lib/mysqld

        ports:
            - "${MYSQL_PORT:-3306}:3306"
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD:-root}'
            MYSQL_ROOT_HOST: "%"
            MYSQL_DATABASE: shipment
            MYSQL_USER: docker
            MYSQL_PASSWORD: secret
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        healthcheck:
            test: [ "CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}" ]
            retries: 3
            timeout: 5s
        networks:
            - shipment

    redis:
        container_name: shipment_redis
        ports:
            - "${REDIS_PORT}:6379"
        build:
            context: ./docker/development/redis
            args:
                HOST_UID: ${HOST_UID}
        volumes:
            - ./docker/development/runtime/redis:/data
        command: redis-server --appendonly yes --replica-read-only no
        networks:
            - shipment
        restart: always
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            retries: 3
            timeout: 5s

networks:
    shipment:
        external: true
